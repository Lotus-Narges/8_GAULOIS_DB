1. Nom des lieux qui finissent par 'um'.
    SELECT nom_lieu
    FROM lieu
    WHERE nom_lieu LIKE '%um';

2. Nombre de personnages par lieu (trié par nombre de personnages décroissant).
    SELECT lieu.nom_lieu, COUNT(personnage.id_personnage)
    FROM lieu
    INNER JOIN personnage
    ON lieu.id_lieu = personnage.id_lieu
    GROUP BY lieu.id_lieu
    ORDER BY COUNT(personnage.id_personnage) DESC;

3. Nom des personnages + spécialité + adresse et lieu d'habitation, triés par lieu puis par nom de personnage.
    SELECT personnage.nom_personnage, personnage.adresse_personnage, specialite.nom_specialite, lieu.nom_lieu
    FROM personnage
    INNER JOIN lieu
    ON personnage.id_lieu = lieu.id_lieu
    INNER JOIN specialite
    ON personnage.id_specialite = specialite.id_specialite
    ORDER BY lieu.nom_lieu, personnage.nom_personnage;

4. Nom des spécialités avec nombre de personnages par spécialité (trié par nombre de personnages décroissant).
    SELECT specialite.nom_specialite, COUNT(personnage.id_personnage) 
    FROM specialite
    INNER JOIN personnage
    ON personnage.id_specialite = specialite.id_specialite
    GROUP BY specialite.id_specialite
    ORDER BY COUNT(personnage.id_personnage) DESC;

5. Nom, date et lieu des batailles, classées de la plus récente à la plus ancienne (dates affichées au format jj/mm/aaaa).
    SELECT bataille.nom_bataille, lieu.nom_lieu, 
    DATE_FORMAT(bataille.date_bataille, '%d/%m/%Y')
    FROM bataille
    INNER JOIN lieu
    ON bataille.id_lieu = lieu.id_lieu
    ORDER BY bataille.date_bataille DESC;

6. Nom des potions + coût de réalisation de la potion (trié par coût décroissant).
    SELECT potion.nom_potion, SUM(ingredient.cout_ingredient * composer.qte) AS cout_total
    FROM potion 
    INNER JOIN composer 
    ON potion.id_potion = composer.id_potion 
    INNER JOIN ingredient 
    ON composer.id_ingredient = ingredient. id_ingredient
    GROUP BY potion.nom_potion
    ORDER BY cout_total DESC;

7. Nom des ingrédients + coût + quantité de chaque ingrédient qui composent la potion 'Santé'.
    SELECT ingredient.nom_ingredient, ingredient.cout_ingredient, composer.qte, potion.nom_potion
    FROM ingredient
    INNER JOIN composer
    ON ingredient.id_ingredient = composer.id_ingredient
    INNER JOIN potion
    ON composer.id_potion = potion.id_potion
    WHERE potion.nom_potion = 'Santé';

8. Nom du ou des personnages qui ont pris le plus de casques dans la bataille 'Bataille du village gaulois'.
    SELECT personnage.nom_personnage, SUM(prendre_casque.qte)
    FROM personnage
    INNER JOIN prendre_casque
    ON personnage.id_personnage = prendre_casque.id_personnage
    INNER JOIN bataille
    ON bataille.id_bataille = prendre_casque.id_bataille
    WHERE bataille.nom_bataille ='Bataille du village gaulois'
    GROUP BY personnage.id_personnage
    HAVING SUM(prendre_casque.qte) >= ALL (
        SELECT SUM(prendre_casque.qte)
        FROM personnage
        INNER JOIN prendre_casque
        ON personnage.id_personnage = prendre_casque.id_personnage
        INNER JOIN bataille
        ON bataille.id_bataille = prendre_casque.id_bataille
        WHERE bataille.nom_bataille ='Bataille du village gaulois'
        GROUP BY personnage.id_personnage
    ); 

9. Nom des personnages et leur quantité de potion bue (en les classant du plus grand buveur au plus petit).
    SELECT personnage.nom_personnage, SUM(boire.dose_boire)
    FROM personnage
    INNER JOIN boire
    ON personnage.id_personnage = boire.id_personnage
    GROUP BY personnage.id_personnage
    ORDER BY SUM(boire.dose_boire) DESC;
    

10. Nom de la bataille où le nombre de casques pris a été le plus important.
    SELECT bataille.nom_bataille, SUM(prendre_casque.qte)
    FROM bataille
    INNER JOIN prendre_casque
    ON bataille.id_bataille = prendre_casque.id_bataille
    GROUP BY bataille.nom_bataille 
    HAVING SUM(prendre_casque.qte) >= ALL (
        SELECT SUM(prendre_casque.qte)
        FROM bataille
        INNER JOIN prendre_casque
        ON bataille.id_bataille = prendre_casque.id_bataille
        GROUP BY bataille.nom_bataille);

11. Combien existe-t-il de casques de chaque type et quel est leur coût total ? (classés par nombre décroissant)
    SELECT type_casque.nom_type_casque, SUM(casque.cout_casque * prendre_casque.qte)
    FROM type_casque
    INNER JOIN casque
    ON type_casque.id_type_casque = casque.id_type_casque
    INNER JOIN prendre_casque
    ON casque.id_casque = prendre_casque.id_casque
    GROUP BY type_casque.nom_type_casque
    ORDER BY SUM(casque.cout_casque * prendre_casque.qte) DESC;

12. Nom des potions dont un des ingrédients est le poisson frais.
    SELECT potion.nom_potion
    FROM composer
    INNER JOIN potion
    ON potion.id_potion = composer.id_potion
    INNER JOIN ingredient
    ON composer.id_ingredient = ingredient.id_ingredient
    WHERE ingredient.nom_ingredient = 'Poisson frais';

13. Nom du / des lieu(x) possédant le plus d'habitants, en dehors du village gaulois.
    SELECT lieu.nom_lieu, COUNT(personnage.id_lieu)
    FROM personnage
    INNER JOIN lieu
    ON lieu.id_lieu = personnage.id_lieu
    WHERE nom_lieu != 'Village gaulois'
    GROUP BY lieu.nom_lieu
    HAVING COUNT(personnage.id_lieu) >= ALL (
        SELECT COUNT(personnage.id_lieu)
        FROM personnage
        INNER JOIN lieu
        ON lieu.id_lieu = personnage.id_lieu
        WHERE nom_lieu != 'Village gaulois'
        GROUP BY lieu.nom_lieu
    );

14. Nom des personnages qui n'ont jamais bu aucune potion.
    SELECT personnage.nom_personnage
    FROM personnage
    INNER JOIN boire
    ON personnage.id_personnage = boire.id_personnage
    WHERE boire.dose_boire = 'NULL';

    SELECT personnage.nom_personnage
    FROM personnage
    WHERE personnage.id_personnage NOT IN (
        SELECT personnage.id_personnage
        FROM boire);

15. Nom du / des personnages qui n'ont pas le droit de boire de la potion 'Magique'.
    SELECT personnage.nom_personnage, potion.nom_potion
    FROM personnage
    INNER JOIN autoriser_boire
    ON personnage.id_personnage = autoriser_boire.id_personnage
    INNER JOIN potion
    ON autoriser_boire.id_potion = potion.id_potion
    WHERE potion.nom_potion = 'Magique';


EXERCICE 2:
A. Ajoutez le personnage suivant : Champdeblix, agriculteur résidant à la ferme Hantassion de Rotomagus.
    DELETE FROM personnage
    WHERE personnage.id_personnage = 45;

    INSERT INTO personnage VALUES ('45' , 'Champdeblix' , 'Ferme Hantassion' , 'indispobible.jpeg', 6, 12 );
    
B. Autorisez Bonemine à boire de la potion magique, elle est jalouse d'Iélosubmarine...
    DELETE FROM autoriser_boire
    WHERE autoriser_boire.id_personnage = 12 AND autoriser_boire.id_potion = 1;

    INSERT INTO autoriser_boire VALUES (1, 12 );
    INSERT INTO autoriser_boire VALUES (13, 12 );

C. Supprimez les casques grecs qui n'ont jamais été pris lors d'une bataille.
    # SELECT type_casque.id_type_casque 
    # FROM type_casque
    # INNER JOIN casque
    # ON type_casque.id_type_casque = casque.id_type_casque
    # INNER JOIN prendre_casque
    # ON casque.id_casque = prendre_casque.id_casque
    # WHERE type_casque.nom_type_casque = 'Grec' AND type_casque.nom_type_casque NOT IN(prendre_casque.id_casque);

    SELECT id_casque
    FROM casque
    WHERE id_type_casque = (
        SELECT id_type_casque
        FROM type_casque
        WHERE LOWER(nom_type_casque) LIKE "%grec%")
    AND casque.id_casque NOT IN (
        SELECT id_casque
        FROM prendre_casque
        );

D. Modifiez l'adresse de Zérozérosix : il a été mis en prison à Condate.
    SELECT * 
    FROM personnage
    WHERE personnage.nom_personnage = 'Zérozérosix';
    # No address registered id_lieu = 8

    UPDATE personnage
    SET adresse_personnage = 'Prison' AND id_lieu = 9
    WHERE id_personnage = 23;

E. La potion 'Soupe' ne doit plus contenir de persil.
    SELECT * 
    FROM potion
    WHERE potion.nom_potion = 'Soupe';
    # potion.id_potion = 9

    SELECT * 
    FROM ingredient
    WHERE ingredient.nom_ingredient = 'Persil';
    # ingredient.id_ingredient = 19

    SELECT *  
    FROM potion
    INNER JOIN composer
    ON potion.id_potion = composer.id_potion
    INNER JOIN ingredient
    ON composer.id_ingredient = ingredient.id_ingredient
    WHERE potion.nom_potion = 'Soupe';

    DELETE FROM composer
    WHERE composer.id_potion = 9 AND composer.id_ingredient = 19;



F. Obélix s'est trompé : ce sont 42 casques Weisenau, et non Ostrogoths, qu'il a pris lors de la bataille 'Attaque de la banque postale'. Corrigez son erreur !
    SELECT *
    FROM personnage
    WHERE personnage.nom_personnage = 'Obélix';
    # id_personnage = 5
    # id_lieu = 1
    # id_specialite = 5

    SELECT *
    FROM casque
    WHERE casque.nom_casque = 'Weisenau';
    # id_casque = 10
    # id_type_casque = 1

    SELECT *
    FROM prendre_casque
    WHERE prendre_casque.id_casque = 10;
    # id_bataille = 2
    # qte = 42

    SELECT *
    FROM prendre_casque
    WHERE prendre_casque.id_casque = 10 AND prendre_casque.id_personnage = 5 AND prendre_casque.id_bataille = 2;
    # prendre_casque.id_casque = 10
    # prendre_casque.id_personnage = 5 
    # prendre_casque.id_bataille = 2
    # qte = 42